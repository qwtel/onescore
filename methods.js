// Generated by CoffeeScript 1.3.3
(function() {
  var calculateScore, countVotes, hotScore, naiveScore, updateScore, wilsonScore;

  Meteor.methods({
    assignBestTitle: function(title) {
      var achievementId, best;
      achievementId = title.entity;
      best = Titles.findOne({
        entity: achievementId
      }, {
        sort: {
          score: -1
        }
      });
      if (best) {
        return Achievements.update(achievementId, {
          $set: {
            title: best.title
          }
        });
      }
    },
    basic: function() {
      var data;
      return data = {
        user: this.userId(),
        date: new Date(),
        score: 0,
        hot: 0,
        best: 0,
        value: 0
      };
    },
    newAchievement: function() {
      var data, id, newAchievement;
      if (!this.is_simulation) {
        newAchievement = Achievements.findOne({
          user: this.userId(),
          created: false
        });
        if (newAchievement) {
          id = newAchievement._id;
        } else {
          data = Meteor.call('basic');
          _.extend(data, {
            created: false
          });
          data.type = 'achievement';
          id = Achievements.insert(data);
        }
        return id;
      }
    },
    comment: function(data) {
      var basic, comment, parent;
      comment = Comments.findOne(data._id);
      if (comment && comment.user === this.userId()) {
        return Comments.update(data._id, {
          $set: {
            text: data.text
          }
        });
      } else {
        basic = Meteor.call('basic');
        _.extend(data, basic, {
          entity: data.topic,
          entityType: data.topicType
        });
        parent = Comments.findOne(data.parent);
        if (parent) {
          _.extend(data, {
            parent: parent._id,
            mention: parent.user,
            level: parent.level + 1
          });
        } else {
          _.extend(data, {
            parent: null,
            mention: null,
            level: 0
          });
        }
        data.type = 'comment';
        return Comments.insert(data);
      }
    },
    vote: function(data) {
      var basic, vote;
      basic = Meteor.call('basic');
      _.extend(data, basic);
      vote = Votes.findOne({
        user: this.userId(),
        entity: data.entity
      });
      if (vote) {
        Votes.update(vote._id, {
          $set: data
        });
      } else {
        data.type = 'vote';
        Votes.insert(data);
      }
      return calculateScore(Collections[data.entityType], data.entity);
    },
    accomplish: function(data) {
      var acc, accomplishId, achievement, basic;
      acc = Accomplishments.findOne({
        user: this.userId(),
        entity: data.entity
      });
      if (acc) {
        Accomplishments.update(acc._id, {
          $set: {
            story: data.story,
            tags: data.tags
          }
        });
        accomplishId = acc._id;
      } else {
        basic = Meteor.call('basic');
        _.extend(data, basic);
        data.type = 'accomplishment';
        accomplishId = Accomplishments.insert(data);
        achievement = Achievements.findOne(data.entity);
        if (achievement) {
          Meteor.users.update(this.userId(), {
            $inc: {
              score: achievement.value
            }
          });
        }
      }
      return accomplishId;
    },
    updateUserScoreComplete: function() {
      var a, accs, entities, s, score;
      accs = Accomplishments.find({
        user: this.userId()
      });
      accs = accs.fetch();
      entities = _.pluck(accs, 'entity');
      a = Achievements.find({
        _id: {
          $in: entities
        }
      });
      a = a.fetch();
      s = _.pluck(a, 'value');
      score = _.reduce(s, function(memo, num) {
        return memo + num;
      }, 0);
      return Meteor.users.update(this.userId(), {
        $set: {
          score: score
        }
      });
    }
  });

  countVotes = function(id, up) {
    return Votes.find({
      entity: id,
      up: up
    }).count();
  };

  updateScore = function(collection, id, score) {
    return collection.update(id, {
      $set: {
        score: score.naive,
        best: score.wilson,
        hot: score.hot,
        value: Math.round(10 * score.wilson)
      }
    });
  };

  calculateScore = function(collection, id) {
    var doc, down, score, up;
    up = countVotes(id, true);
    down = countVotes(id, false);
    doc = collection.findOne(id);
    score = {
      naive: naiveScore(up, down),
      wilson: wilsonScore(up, up + down),
      hot: hotScore(up, down, doc.date)
    };
    return updateScore(collection, id, score);
  };

  naiveScore = function(up, down) {
    return up - down;
  };

  wilsonScore = function(pos, n) {
    var phat, z;
    if (n === 0) {
      return 0;
    }
    z = 1.96;
    phat = pos / n;
    return (phat + z * z / (2 * n) - z * Math.sqrt((phat * (1 - phat) + z * z / (4 * n)) / n)) / (1 + z * z / n);
  };

  hotScore = function(up, down, date) {
    var a, b, ts, x, y, z;
    a = new Date(date).getTime();
    b = new Date(2005, 12, 8, 7, 46, 43).getTime();
    ts = a - b;
    x = naiveScore(up, down);
    if (x > 0) {
      y = 1;
    } else if (x < 0) {
      y = -1;
    } else {
      y = 0;
    }
    z = Math.max(Math.abs(x), 1);
    return Math.round(Math.log(z) / Math.log(10) + y * ts / 45000);
  };

}).call(this);
