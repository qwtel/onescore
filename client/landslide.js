// Generated by CoffeeScript 1.3.3
(function() {
  var AppRouter, Router, findTags, focusById, getThreadId, getUsername, hardReset, makeOkCancelHandler, positionActivityModal, softReset, wrapTags,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Meteor.subscribe('ushers', function() {
    var userId, userName;
    if (cookie.get('user')) {
      userId = cookie.get('user');
      return Session.set('user', userId);
    } else {
      userName = Math.floor(1000000 + (Math.random() * ((9999999 - 1000000) + 1)));
      userId = Ushers.insert({
        name: userName
      });
      Session.set('user', userId);
      return cookie.set('user', userId);
    }
  });

  Session.set('activitiesLoaded', false);

  Meteor.subscribe('activities', function() {
    return Session.set('activitiesLoaded', true);
  });

  Meteor.subscribe('drafts', Session.get('user'));

  Session.set('topic', 'dashboard');

  Meteor.autosubscribe(function() {
    var topic;
    topic = Session.get('topic');
    if (topic) {
      Session.set('commentsLoaded', false);
      return Meteor.subscribe('comments', topic, function() {
        return Session.set('commentsLoaded', true);
      });
    }
  });

  /*
  Meteor.subscribe 'slideshows', ->
    unless Session.get 'slideshow_id'
      slideshow = Slideshows.findOne {},
        sort:
          name: 1
  
  Meteor.autosubscribe ->
    slideshow_id = Session.get 'slideshow_id'
    if slideshow_id
      Meteor.subscribe 'slides', slideshow_id
  
      slide_id = Session.get 'slide_id'
      if slide_id
        Meteor.subscribe 'comments', slide_id
  */


  makeOkCancelHandler = function(options) {
    var cancel, ok;
    ok = options.ok || function() {};
    cancel = options.cancel || function() {};
    return function(evt) {
      var value;
      if (evt.type === "keydown" && evt.which === 27) {
        return cancel.call(this, evt);
      } else if (evt.type === "keyup" && evt.which === 13) {
        value = String(evt.target.value || "");
        if (value) {
          return ok.call(this, value, evt);
        } else {
          return cancel.call(this, evt);
        }
      }
    };
  };

  getThreadId = function(comment) {
    while (comment.parent !== null) {
      comment = Comments.findOne(comment.parent);
    }
    return comment._id;
  };

  focusById = function(id) {
    return $('#' + id).focus().select();
  };

  findTags = function(text) {
    var match, pattern, tags;
    pattern = /[^&]\B(#(\w\w+))/g;
    text = _.escape(text);
    tags = [];
    while (match = pattern.exec(text)) {
      tags.push(match[2]);
    }
    return tags;
  };

  wrapTags = function(text) {
    var pattern;
    pattern = /[^&]\B(#(\w\w+))/g;
    text = _.escape(text);
    return text.replace(pattern, ' <a class="tag" data-tag="$2">$1</a>');
  };

  $.fn.clear = function() {
    return $(this).val('');
  };

  positionActivityModal = function($modal, id) {
    var p;
    if (id != null) {
      p = $('#activity-' + id).offset();
    }
    if (!(id != null) || !(p != null)) {
      p = {};
      p.top = 50;
    }
    $modal.modal({
      keyboard: false,
      show: true
    }).offset({
      top: p.top
    }).on('hide', function() {
      $('body').height('auto');
      return Router.navigate('activities', true);
    });
    $('body').height($('body').height() + $(window).height());
    return $(document).scrollTop(p.top - 50);
  };

  getUsername = function(userId) {
    var user;
    user = Ushers.findOne(userId);
    if (user) {
      return user.name;
    }
    return '';
  };

  softReset = function() {
    $('.modal').modal('hide');
    Session.set('add-comment', null);
    Session.set('edit-comment', null);
    Session.set('topic', 'dashboard');
    Session.set('thread', null);
    Session.set('activity', null);
    return Session.set('addingTag', null);
  };

  hardReset = function() {
    softReset();
    $(document).scrollTop(0);
    Session.set('comment-filter', null);
    Session.set('activity-filter-1', null);
    Session.set('activity-filter-2', null);
    return Session.set('tagFilter', null);
  };

  Handlebars.registerHelper('isActive', function(name, value) {
    if (Session.equals(name, value)) {
      return 'active';
    } else {
      return '';
    }
  });

  Handlebars.registerHelper('belongsTo', function(user) {
    return Session.equals('user', user);
  });

  Handlebars.registerHelper('isMe', function(user) {
    if (Session.equals('user', user)) {
      return 'my';
    } else {
      return '';
    }
  });

  Handlebars.registerHelper('isLva', function(user) {
    if (user <= 2000000) {
      return 'lva';
    } else {
      return '';
    }
  });

  Handlebars.registerHelper('userIn', function(field) {
    var _ref;
    if (field != null) {
      return _ref = Session.get('user'), __indexOf.call(field, _ref) >= 0;
    }
    return false;
  });

  Handlebars.registerHelper('activity', function() {
    var activity, activityId;
    activityId = Session.get('activity');
    activity = Activities.findOne(activityId);
    return activity || {};
  });

  Handlebars.registerHelper('wrapTags', wrapTags);

  Handlebars.registerHelper('getUsername', getUsername);

  _.extend(Template.content, {
    page: function(page) {
      return Session.equals('page', page);
    }
  });

  _.extend(Template.header, {
    events: {
      'click .nav-item': function(e) {
        return Router.navigate($(e.target).data('href'), true);
      }
    },
    items: function() {
      var item, items, _i, _len;
      items = [
        {
          name: 'Explore'
        }, {
          name: 'Compete'
        }
      ];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (!item.url) {
          item.url = item.name.toLowerCase();
        }
        item.active = Session.equals('page', item.url) ? 'active' : '';
      }
      return items;
    }
  });

  _.extend(Template.dashboard, {
    events: {
      'click .add-comment': function(e) {
        Session.set('add-comment', 0);
        return Session.set('edit-comment', null);
      },
      'click .btn-filter': function(e) {
        var filter;
        filter = $(e.target).data('filter');
        if (filter) {
          if (Session.get('comment-filter') === filter) {
            return Session.set('comment-filter', null);
          } else {
            return Session.set('comment-filter', filter);
          }
        }
      },
      'keyup .comment-text,  keydown .comment-text': makeOkCancelHandler({
        ok: function(text, e) {
          Comments.insert({
            text: text,
            date: new Date,
            topic: Session.get('topic'),
            parent: null,
            mention: null,
            user: Session.get('user')
          });
          Session.set('add-comment', null);
          Session.set('edit-comment', null);
          return e.target.value = "";
        }
      })
    },
    addComment: function() {
      return Session.equals('add-comment', 0);
    }
  });

  _.extend(Template.comments, {
    events: {
      'keyup .comment-text, keydown .comment-text, \
     keyup .edit-text, keydown .edit-text': makeOkCancelHandler({
        ok: function(text, e) {
          if (Session.get('add-comment') !== null) {
            Comments.insert({
              text: text,
              date: new Date,
              topic: Session.get('topic'),
              parent: Session.get('thread'),
              mention: this.user,
              user: Session.get('user')
            });
          } else if (Session.equals('edit-comment', this._id)) {
            Comments.update(this._id, {
              $set: {
                text: text
              }
            });
          }
          Session.set('add-comment', null);
          Session.set('edit-comment', null);
          return e.target.value = "";
        }
      })
    },
    select: function(id) {
      var sel;
      sel = {
        topic: Session.get('topic'),
        parent: null
      };
      if (id) {
        sel.parent = id;
      } else {
        if (Session.equals('comment-filter', 'my')) {
          sel.user = Session.get('user');
        } else if (Session.equals('comment-filter', 'lva')) {
          sel.user = {
            $lt: 2000000
          };
        }
      }
      return sel;
    },
    comments: function() {
      var sel;
      sel = Template.comments.select();
      return Comments.find(sel, {
        sort: {
          date: -1
        }
      });
    },
    replies: function() {
      var sel;
      sel = Template.comments.select(this._id);
      return Comments.find(sel, {
        sort: {
          date: 1
        }
      });
    },
    noContent: function() {
      var sel;
      if (Session.equals('commentsLoaded', true)) {
        sel = Template.comments.select();
        return Comments.find(sel).count() === 0;
      }
      return false;
    }
  });

  _.extend(Template.achievement, {
    events: {
      'click .reply': function(e) {
        Session.set('add-comment', this._id);
        Session.set('edit-comment', null);
        Session.set('thread', getThreadId(this));
        Meteor.flush();
        return focusById("reply-" + this._id);
      },
      'click .like': function(e) {
        return Comments.update(this._id, {
          $push: {
            likes: Session.get('user')
          }
        });
      },
      'click .unlike': function(e) {
        return Comments.update(this._id, {
          $pull: {
            likes: Session.get('user')
          }
        });
      },
      'click .edit': function(e) {
        Session.set('add-comment', null);
        Session.set('edit-comment', this._id);
        Session.set('thread', getThreadId(this));
        Meteor.flush();
        return focusById("reply-" + this._id);
      },
      'click .remove': function(e) {
        return Comments.remove(this._id);
      }
    },
    addComment: function() {
      return Session.equals('add-comment', this._id);
    },
    editComment: function() {
      return Session.equals('edit-comment', this._id);
    },
    formatDate: function(date) {
      var d;
      d = moment(new Date(this.date));
      return d.format("DD.MM.YYYY, hh:mm");
    },
    likesNum: function() {
      if (this.likes != null) {
        return this.likes.length;
      } else {
        return 0;
      }
    },
    nested: function() {
      if (this.parent) {
        return 'nested';
      } else {
        return '';
      }
    },
    addLineBreaks: function(text) {
      text = _.escape(text);
      return text.replace('\n', '<br>');
    },
    mention: function() {
      if (this.mention !== null) {
        return "@" + (getUsername(this.mention)) + ":";
      }
    }
  });

  _.extend(Template.activities, {
    events: {
      'click #create .open': function(e) {
        return Router.navigate('activities/new', true);
      },
      'click .btn-filter': function(e) {
        var filter, which;
        Session.set('tagFilter', null);
        filter = $(e.target).data('filter');
        which = $(e.target).data('which');
        if (Session.get("activity-filter-" + which) === filter) {
          return Session.set("activity-filter-" + which, null);
        } else {
          return Session.set("activity-filter-" + which, filter);
        }
      }
    },
    activities: function() {
      var sel;
      sel = Template.activities.select();
      if (Session.get('tagFilter')) {
        sel.tags = Session.get('tagFilter');
      }
      return Activities.find(sel, {
        sort: {
          score: -1,
          name: 1
        }
      });
    },
    select: function() {
      var drafts, sel;
      sel = {};
      if (Session.equals('activity-filter-1', 'my')) {
        sel.user = Session.get('user');
      } else if (Session.equals('activity-filter-1', 'lva')) {
        sel.user = {
          $lt: 2000000
        };
      }
      if (Session.equals('activity-filter-2', 'fav')) {
        sel.likes = Session.get('user');
      } else if (Session.equals('activity-filter-2', 'voted')) {
        sel.votes = Session.get('user');
      } else if (Session.equals('activity-filter-2', 'saved')) {
        drafts = Drafts.find({
          user: Session.get('user'),
          handedIn: false
        }).map(function(draft) {
          return draft.activity;
        });
        sel._id = {
          $in: drafts
        };
      } else if (Session.equals('activity-filter-2', 'pending')) {
        drafts = Drafts.find({
          user: Session.get('user'),
          handedIn: true
        }).map(function(draft) {
          return draft.activity;
        });
        sel._id = {
          $in: drafts
        };
      } else if (Session.equals('activity-filter-2', 'done')) {
        sel = null;
      }
      return sel;
    },
    noContent: function() {
      var sel;
      if (Session.equals('activitiesLoaded', true)) {
        sel = Template.activities.select();
        return Activities.find(sel).count() === 0;
      }
      return false;
    }
  });

  _.extend(Template.tags, {
    events: {
      'click .add': function(e) {
        if (this._id) {
          Session.set('addingTag', this._id);
        } else {
          Session.set('addingTag', 'new');
        }
        Meteor.flush();
        return focusById('edittag-' + this._id);
      },
      'click .remove': function(e) {
        var id;
        id = $(e.target).attr('id');
        if (id !== '') {
          if (Session.equals('page', 'activities')) {
            return Activities.update(id, {
              $pull: {
                tags: this.tag
              }
            });
          }
        }
      },
      'keyup .edittag-input,  keydown .edittag-input': makeOkCancelHandler({
        ok: function(text, e) {
          if (!this.tags) {
            this.tags = [];
          }
          if (!_.contains(this.tags, text)) {
            this.tags.push(text);
          }
          Session.set('addingTag', null);
          if (Session.equals('page', 'activities')) {
            return Activities.update(this._id, {
              $set: {
                tags: this.tags
              }
            });
          }
        }
      })
    },
    tags: function() {
      var tagInfos;
      tagInfos = [];
      _.each(this.tags, function(tag) {
        var tagInfo;
        tagInfo = _.find(tagInfos, function(x) {
          return x.tag === tag;
        });
        if (!tagInfo) {
          return tagInfos.push({
            tag: tag
          });
        }
      });
      tagInfos = _.sortBy(tagInfos, function(x) {
        return x.tag;
      });
      return tagInfos;
    },
    addingTag: function() {
      if (this._id) {
        return Session.equals('addingTag', this._id);
      } else {
        return Session.equals('addingTag', 'new');
      }
    }
  });

  _.extend(Template.tagFilter, {
    events: {
      'click .tag': function(e) {
        if (Session.equals('tagFilter', this.tag)) {
          return Session.set('tagFilter', null);
        } else {
          return Session.set('tagFilter', this.tag);
        }
      }
    },
    tags: function() {
      var entities, sel, tagInfos;
      if (Session.equals('page', 'activities')) {
        sel = Template.activities.select();
        entities = Activities.find(sel);
      } else if (Session.equals('page', 'slides')) {
        sel = Template.slideshows.select();
        entities = Slideshows.find(sel);
      }
      tagInfos = [];
      entities.forEach(function(activity) {
        return _.each(activity.tags, function(tag) {
          var tagInfo;
          tagInfo = _.find(tagInfos, function(x) {
            return x.tag === tag;
          });
          if (!tagInfo) {
            return tagInfos.push({
              tag: tag,
              count: 1
            });
          } else {
            return tagInfo.count++;
          }
        });
      });
      tagInfos = _.sortBy(tagInfos, function(x) {
        return x.tag;
      });
      return tagInfos;
    }
  });

  _.extend(Template.activity, {
    events: {
      'click .open': function(e) {
        if (this._id) {
          return Router.navigate('activities/show/' + this._id, true);
        }
      },
      'click .edit': function(e) {
        if (this._id) {
          return Router.navigate('activities/edit/' + this._id, true);
        }
      },
      'click .like': function(e) {
        return Activities.update(this._id, {
          $push: {
            likes: Session.get('user')
          }
        });
      },
      'click .unlike': function(e) {
        return Activities.update(this._id, {
          $pull: {
            likes: Session.get('user')
          }
        });
      },
      'click .up': function(e) {
        var _ref;
        if (!this.votes || !(_ref = Session.get('user'), __indexOf.call(this.votes, _ref) >= 0)) {
          return Activities.update(this._id, {
            $inc: {
              score: 1
            },
            $push: {
              votes: Session.get('user')
            }
          });
        }
      },
      'click .down': function(e) {
        var _ref;
        if (!this.votes || !(_ref = Session.get('user'), __indexOf.call(this.votes, _ref) >= 0)) {
          return Activities.update(this._id, {
            $inc: {
              score: -1
            },
            $push: {
              votes: Session.get('user')
            }
          });
        }
      },
      'click .remove': function(e) {
        Drafts.remove({
          activity: this._id,
          user: Session.get('user')
        });
        return Activities.remove(this._id);
      },
      'click .tag': function(e) {
        var tag;
        tag = $(e.target).data('tag');
        return Session.set('tagFilter', tag);
      }
    },
    score: function() {
      if (this.score > 0) {
        return this.score;
      } else {
        return 0;
      }
    }
  });

  Session.set('editUsername', false);

  _.extend(Template.userWidget, {
    events: {
      'click .edit': function(e) {
        var value;
        value = Session.get('editUsername');
        Session.set('editUsername', !value);
        Meteor.flush();
        return $('#user-name').focus();
      },
      'keyup #user-name, keydown #user-name': makeOkCancelHandler({
        ok: function(text, e) {
          text = text.replace(/\s/g, '');
          Ushers.update(this._id, {
            name: text
          });
          return Session.set('editUsername', false);
        }
      })
    },
    user: function() {
      return Ushers.findOne(Session.get('user'));
    },
    editUsername: function() {
      return Session.equals('editUsername', true);
    }
  });

  _.extend(Template.createActivityModal, {
    events: {
      'click .create-activity': function(e) {
        var data, name, tags, url;
        name = $('.activity-name').val();
        url = encodeURIComponent((name.toLowerCase()).replace(/\s/g, '-'));
        tags = findTags($('.description-short').val());
        _.each(this.tags, function(x) {
          if (!_.contains(tags, x)) {
            return tags.push(x);
          }
        });
        data = {
          name: name,
          short: $('.description-short').val(),
          full: $('.description-full').val(),
          user: Session.get('user'),
          tags: tags,
          url: url
        };
        if (Session.get('activity')) {
          Activities.update(this._id, {
            $set: data
          });
        } else {
          data.score = 0;
          Activities.insert(data);
        }
        $('.create-modal').modal('hide');
        return $('.activity-name, .description-short, .description-full').clear();
      }
    },
    title: function() {
      var activityId;
      activityId = Session.get('activity');
      if (activityId) {
        return this.name;
      } else {
        return 'Create New Activity';
      }
    }
  });

  _.extend(Template.accomplishActivityModal, {
    events: {
      'click .save-activity': function(e) {
        var data, draft;
        data = {
          user: Session.get('user'),
          activity: Session.get('activity'),
          text: $('.accomplish-text').val(),
          handedIn: false
        };
        draft = Drafts.findOne({
          user: Session.get('user'),
          activity: Session.get('activity')
        });
        if (draft != null) {
          if (data.text !== '') {
            Drafts.update(draft._id, {
              $set: data
            });
          } else {
            Drafts.remove(draft._id);
          }
        } else {
          Drafts.insert(data);
        }
        return $('.accomplish-modal').modal('hide');
      },
      'click .hand-in-activity': function(e) {
        var draft;
        draft = Drafts.findOne({
          user: Session.get('user'),
          activity: Session.get('activity')
        });
        Drafts.update(draft, {
          $set: {
            handedIn: true
          }
        });
        return $('.accomplish-modal').modal('hide');
      }
    },
    draft: function() {
      var draft;
      draft = Drafts.findOne({
        user: Session.get('user'),
        activity: Session.get('activity')
      });
      return draft || {};
    }
  });

  AppRouter = (function(_super) {

    __extends(AppRouter, _super);

    function AppRouter() {
      return AppRouter.__super__.constructor.apply(this, arguments);
    }

    AppRouter.prototype.routes = {
      '': 'default',
      ':menu': 'menu',
      'activities/new': 'activityNew',
      'activities/show/:id': 'activityShow',
      'activities/edit/:id': 'activityEdit'
    };

    AppRouter.prototype["default"] = function() {
      return this.navigate('dashboard', true);
    };

    AppRouter.prototype.menu = function(page) {
      softReset();
      return Session.set('page', page);
    };

    AppRouter.prototype.activityShow = function(id) {
      Session.set('page', 'activities');
      Session.set('activity', id);
      Session.set('topic', id);
      Meteor.flush();
      return positionActivityModal($('.accomplish-modal'), id);
    };

    AppRouter.prototype.activityNew = function() {
      Session.set('page', 'activities');
      Session.set('activity', null);
      Meteor.flush();
      return positionActivityModal($('.create-modal'));
    };

    AppRouter.prototype.activityEdit = function(id) {
      Session.set('page', 'activities');
      Session.set('activity', id);
      Meteor.flush();
      return positionActivityModal($('.create-modal'), id);
    };

    return AppRouter;

  })(Backbone.Router);

  Router = new AppRouter;

  Meteor.startup(function() {
    return Backbone.history.start({
      pushState: true
    });
  });

  _.extend(Template.slideshows, {
    events: {
      'click .btn-filter': function(e) {
        var filter, which;
        Session.set('tagFilter', null);
        filter = $(e.target).data('filter');
        which = $(e.target).data('which');
        if (Session.get("slideshow-filter-" + which) === filter) {
          return Session.set("slideshow-filter-" + which, null);
        } else {
          return Session.set("slideshow-filter-" + which, filter);
        }
      },
      'click .open': function(e) {
        console.log('navigate');
        return Router.navigate('slides/' + this._id, true);
      }
    },
    select: function() {
      var sel;
      sel = {};
      if (Session.equals('slideshow-filter-1', 'my')) {
        sel.user = Session.get('user');
      } else if (Session.equals('slideshow-filter-1', 'lva')) {
        sel.user = {
          $lt: 2000000
        };
      }
      if (Session.equals('slideshow-filter-2', 'fav')) {
        sel.likes = Session.get('user');
      }
      return sel;
    },
    slideshows: function() {
      return Slideshows.find();
    }
  });

  _.extend(Template.slides, {
    events: {
      'click #next': function(e) {},
      'click #prev': function(e) {}
    }
  });

}).call(this);
