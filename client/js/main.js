// Generated by CoffeeScript 1.3.3
(function() {
  var AppRouter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Session.set('limit', 'all');

  AppRouter = (function(_super) {

    __extends(AppRouter, _super);

    function AppRouter() {
      return AppRouter.__super__.constructor.apply(this, arguments);
    }

    AppRouter.prototype.routes = {
      '': 'default',
      'home': 'home',
      'explore': 'explore',
      'ladder': 'ladder',
      'achievements/new': 'newAchievement',
      'achievements/:id': 'achievements',
      'achievements/:id/:tab': 'achievements',
      'achievements/:id/:tab/:type': 'achievements',
      'accomplishments/:id': 'accomplishments',
      'accomplishments/:id/:tab': 'accomplishments',
      'comments/:id': 'comments',
      'comments/:id/:something': 'comments',
      ':user': 'user',
      ':user/:menu': 'user'
    };

    AppRouter.prototype["default"] = function() {
      return this.navigate('home', true);
    };

    AppRouter.prototype.home = function() {
      this.hardReset();
      Session.set('page', 'home');
      return Session.set('sort', 'hot');
    };

    AppRouter.prototype.explore = function() {
      this.hardReset();
      Session.set('page', 'explore');
      return Session.set('sort', 'best');
    };

    AppRouter.prototype.ladder = function() {
      this.hardReset();
      Session.set('page', 'ladder');
      return Session.set('sort', 'best');
    };

    AppRouter.prototype.user = function(user, menu) {
      this.hardReset();
      Session.set('page', 'profile');
      Session.set('sort', 'new');
      Session.set('username', user);
      if (!menu) {
        menu = 'activity';
      }
      return Session.set('menu', menu);
    };

    AppRouter.prototype.newAchievement = function() {
      var id;
      this.softReset();
      Session.set('page', 'achievements');
      Session.set('tab', 'edit');
      return id = Meteor.call('newAchievement', function(error, result) {
        if (!error) {
          Session.set('single', result);
          return Session.set('newAchievement', result);
        }
      });
    };

    AppRouter.prototype.achievements = function(id, tab, type) {
      this.softReset();
      Session.set('page', 'achievements');
      Session.set('sort', 'best');
      Session.set('single', id);
      if (!tab) {
        tab = 'info';
      }
      Session.set('tab', tab);
      if (type) {
        return Session.set('story', type);
      } else {
        return Session.set('story', null);
      }
    };

    AppRouter.prototype.accomplishments = function(id, tab) {
      this.softReset();
      Session.set('page', 'accomplishments');
      Session.set('sort', 'best');
      Session.set('single', id);
      if (!tab) {
        tab = 'info';
      }
      return Session.set('tab', tab);
    };

    AppRouter.prototype.comments = function(id, something) {
      this.softReset();
      Session.set('page', 'comments');
      Session.set('sort', 'best');
      return Session.set('single', id);
    };

    AppRouter.prototype.softReset = function() {
      $(document).scrollTop(0);
      Session.set('expand', null);
      Session.set('story', null);
      Session.set('parent', null);
      return Session.set('level', 0);
    };

    AppRouter.prototype.hardReset = function() {
      this.softReset();
      Session.set('single', null);
      Session.set('tab', null);
      return Session.set('unexpand', null);
    };

    return AppRouter;

  })(Backbone.Router);

  window.Router = new AppRouter;

  Meteor.startup(function() {
    return Backbone.history.start({
      pushState: true
    });
  });

}).call(this);
