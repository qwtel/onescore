// Generated by CoffeeScript 1.3.3
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

window.categories = [
  {
    name: 'Carrier'
  }, {
    name: 'Education'
  }, {
    name: 'Health'
  }, {
    name: 'Meta'
  }, {
    name: 'Random'
  }, {
    name: 'Sports'
  }
];

window.makeOkCancelHandler = function(options) {
  var cancel, ok;
  ok = options.ok || function() {};
  cancel = options.cancel || function() {};
  return function(evt) {
    var value;
    if (evt.type === "keydown" && evt.which === 27) {
      return cancel.call(this, evt);
    } else if (evt.type === "keyup" && evt.which === 13) {
      value = String(evt.target.value || "");
      if (value) {
        return ok.call(this, value, evt);
      } else {
        return cancel.call(this, evt);
      }
    }
  };
};

window.focusById = function(id) {
  return $("#" + id).focus();
};

window.findTags = function(text) {
  var match, pattern, tag, tags;
  pattern = /[^&]\B(#(\w\w+))/g;
  text = ' ' + text;
  text = _.escape(text);
  tags = [];
  while (match = pattern.exec(text)) {
    tag = match[2];
    tag = tag.replace(/\s/g, '');
    tags.push(tag);
  }
  return tags;
};

window.wrapTags = function(text) {
  var pattern;
  if (text) {
    pattern = /[^&]\B(#(\w\w+))/g;
    text = ' ' + text;
    text = _.escape(text);
    return text.replace(pattern, ' <a class="tag" data-tag="$2">$1</a>');
  }
  return '';
};

$.fn.clear = function() {
  return $(this).val('');
};

window.positionActivityModal = function($modal, id) {
  var p;
  if (id != null) {
    p = $('#activity-' + id).offset();
  }
  if (!(id != null) || !(p != null)) {
    p = {};
    p.top = 50;
  }
  $modal.modal({
    keyboard: false,
    show: true
  }).offset({
    top: p.top
  }).on('hide', function() {
    $('body').height('auto');
    return window.Router.navigate('activities', true);
  });
  $('body').height($('body').height() + $(window).height());
  return $(document).scrollTop(p.top - 50);
};

window.getUsername = function(userId) {
  var user;
  user = Ushers.findOne(userId);
  if (user) {
    return user.name;
  }
  return '';
};

Session.toggle = function(name, value) {
  if (value != null) {
    if (Session.equals(name, value)) {
      return Session.set(name, null);
    } else {
      return Session.set(name, value);
    }
  } else {
    return Session.set(name, !Session.get(name));
  }
};

Session.embed = function(name, key, value) {
  var field;
  field = Session.get(name);
  if (!field) {
    field = {};
  }
  if (field[key] === value) {
    field[key] = null;
  } else {
    field[key] = value;
  }
  return Session.set(name, field);
};

Session.push = function(name, value) {
  var field;
  field = Session.get(name);
  if (!field) {
    field = [];
  }
  if (_.contains(field, value)) {
    field = _.without(field, value);
  } else {
    field.push(value);
  }
  if (_.size(field) > 0) {
    Session.set(name, field);
  } else {
    Session.set(name, null);
  }
  return Session.toggle('_' + name, true);
};

Session.union = function(name, values) {
  var field;
  field = Session.get(name);
  if (!field) {
    field = [];
  }
  field = _.union(field, values);
  Session.set(name, field);
  return Session.toggle('_' + name, true);
};

Handlebars.registerHelper('session', function(name) {
  return Session.get(name);
});

Handlebars.registerHelper('show', function(name) {
  return Session.equals(name, true);
});

Handlebars.registerHelper('equals', function(name, value) {
  return Session.equals(name, value);
});

window.isActive = function(name, value) {
  var field, state;
  if (value === 'true') {
    value = true;
  }
  if (value === 'false') {
    value = false;
  }
  field = Session.get(name);
  if (_.isArray(field) || _.isObject(field)) {
    Session.get('_' + name);
    state = _.contains(field, value);
  } else {
    state = Session.equals(name, value);
  }
  if (state === true) {
    return 'active';
  } else {
    return '';
  }
};

Handlebars.registerHelper('isActive', window.isActive);

Handlebars.registerHelper('belongsTo', function(user) {
  return Meteor.user()._id === user._id;
});

Handlebars.registerHelper('isMe', function(user) {
  if (user) {
    if (user instanceof Object) {
      user = user._id;
    }
    if (Meteor.user()._id === user) {
      return 'my';
    } else {
      return '';
    }
  }
});

Handlebars.registerHelper('userIn', function(field) {
  var _ref;
  if (field != null) {
    return _ref = Session.get('user'), __indexOf.call(field, _ref) >= 0;
  }
  return false;
});

Handlebars.registerHelper('activity', function() {
  var activity, activityId;
  activityId = Session.get('activity');
  activity = Activities.findOne(activityId);
  return activity || {};
});

Handlebars.registerHelper('wrapTags', window.wrapTags);

Handlebars.registerHelper('getUsername', window.getUsername);

Handlebars.registerHelper('categories', function() {
  var cat, _i, _len, _ref;
  _ref = window.categories;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    cat = _ref[_i];
    if (!cat.url) {
      cat.url = cat.name.toLowerCase();
    }
  }
  return window.categories;
});

Handlebars.registerHelper('formatDate', function(date) {
  var d;
  d = moment(new Date(date));
  return d.format("DD.MM.YYYY, hh:mm");
});

Handlebars.registerHelper('timeago', function(date) {
  var d;
  d = moment(new Date(date));
  return d.fromNow();
});

Handlebars.registerHelper('addLineBreaks', function(text) {
  text = _.escape(text);
  return text.replace('\n', '<br>');
});
