// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _.extend(Template.activity, {
    events: {
      'click .open': function(e) {
        if (this._id) {
          return window.Router.navigate('activities/show/' + this._id, true);
        }
      },
      'click .edit': function(e) {
        if (this._id) {
          return window.Router.navigate('activities/edit/' + this._id, true);
        }
      },
      'click .like': function(e) {
        return Activities.update(this._id, {
          $push: {
            likes: Session.get('user')
          }
        });
      },
      'click .unlike': function(e) {
        return Activities.update(this._id, {
          $pull: {
            likes: Session.get('user')
          }
        });
      },
      'click .up': function(e) {
        var _ref;
        if (!this.votes || !(_ref = Session.get('user'), __indexOf.call(this.votes, _ref) >= 0)) {
          return Activities.update(this._id, {
            $inc: {
              score: 1
            },
            $push: {
              votes: Session.get('user')
            }
          });
        }
      },
      'click .down': function(e) {
        var _ref;
        if (!this.votes || !(_ref = Session.get('user'), __indexOf.call(this.votes, _ref) >= 0)) {
          return Activities.update(this._id, {
            $inc: {
              score: -1
            },
            $push: {
              votes: Session.get('user')
            }
          });
        }
      },
      'click .remove': function(e) {
        Drafts.remove({
          activity: this._id,
          user: Session.get('user')
        });
        return Activities.remove(this._id);
      },
      'click .tag': function(e) {
        var tag;
        tag = $(e.target).data('tag');
        return Session.set('tagFilter', tag);
      }
    },
    score: function() {
      if (this.score > 0) {
        return this.score;
      } else {
        return 0;
      }
    }
  });

}).call(this);
