// Generated by CoffeeScript 1.3.3
(function() {

  _.extend(Template.edit, {
    events: {
      'click .close': function(e) {
        return Session.set('styleGuide', false);
      },
      'click .discard': function(e) {
        return Session.toggle('expand', this._id);
      },
      'click .suggest': function(e) {
        var title;
        title = $("#title-" + this._id).val();
        return Titles.insert({
          entity: this._id,
          title: title,
          user: Meteor.user()._id,
          score: 0
        });
      },
      'change .category': function(e) {
        return this.category = $("#category-" + this._id).val();
      },
      'change .description': function(e) {
        var description, tags;
        description = $("#description-" + this._id).val();
        tags = window.findTags(description);
        this.description = description;
        return this.tags = tags;
      },
      'click .create': function(e) {
        var data, id;
        data = {};
        $("#form-" + this._id).find('.lazy').each(function() {
          var $t, field;
          $t = $(this);
          field = $t.data('field');
          if (field != null) {
            return data[field] = $t.val();
          }
        });
        data.created = true;
        Achievements.update(this._id, {
          $set: data
        });
        id = window.createNewAchievement();
        Session.set('newAchievement', id);
        return Session.set('expand', null);
      },
      'click .vote': function(e) {
        var $t, up;
        if (!e.isPropagationStopped()) {
          $t = $(e.target);
          if (!$t.hasClass('vote')) {
            $t = $t.parents('.vote');
          }
          up = $t.data('up');
          Meteor.call('vote', 'titles', this._id, up);
          return e.stopPropagation();
        }
      }
    },
    selected: function(category) {
      if (category) {
        if (category === this.name) {
          return 'selected';
        } else {
          return '';
        }
      } else if (Session.get('category') != null) {
        if (Session.get('category') === this.name) {
          return 'selected';
        } else {
          return '';
        }
      } else {
        if ('Random' === this.name) {
          return 'selected';
        } else {
          return '';
        }
      }
    },
    titles: function() {
      var id, titles;
      id = Session.get('single');
      titles = Titles.find({
        entity: id,
        user: Meteor.user()._id
      }, {
        sort: {
          score: -1
        }
      });
      return titles;
    },
    hasTitles: function() {
      var id, titles;
      id = Session.get('single');
      titles = Titles.find({
        entity: id,
        user: Meteor.user()._id
      });
      return titles.count();
    },
    voted: function(state) {
      var vote;
      state = state === "up" ? true : false;
      vote = Votes.findOne({
        user: Meteor.user()._id,
        entity: this._id
      });
      if (vote && vote.up === state) {
        return 'active';
      }
      return '';
    }
  });

}).call(this);
