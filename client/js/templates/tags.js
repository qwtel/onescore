// Generated by CoffeeScript 1.3.3
(function() {

  _.extend(Template.tags, {
    events: {
      'click .add': function(e) {
        if (this._id) {
          Session.set('addingTag', this._id);
        } else {
          Session.set('addingTag', 'new');
        }
        Meteor.flush();
        return window.focusById('edittag-' + this._id);
      },
      'click .remove': function(e) {
        var id;
        id = $(e.target).attr('id');
        if (id !== '') {
          if (Session.equals('page', 'activities')) {
            return Activities.update(id, {
              $pull: {
                tags: this.tag
              }
            });
          }
        }
      },
      'keyup .edittag-input,  keydown .edittag-input': window.makeOkCancelHandler({
        ok: function(text, e) {
          if (!this.tags) {
            this.tags = [];
          }
          if (!_.contains(this.tags, text)) {
            this.tags.push(text);
          }
          Session.set('addingTag', null);
          if (Session.equals('page', 'activities')) {
            return Activities.update(this._id, {
              $set: {
                tags: this.tags
              }
            });
          }
        }
      })
    },
    tags: function() {
      var tagInfos;
      tagInfos = [];
      _.each(this.tags, function(tag) {
        var tagInfo;
        tagInfo = _.find(tagInfos, function(x) {
          return x.tag === tag;
        });
        if (!tagInfo) {
          return tagInfos.push({
            tag: tag
          });
        }
      });
      tagInfos = _.sortBy(tagInfos, function(x) {
        return x.tag;
      });
      return tagInfos;
    },
    addingTag: function() {
      if (this._id) {
        return Session.equals('addingTag', this._id);
      } else {
        return Session.equals('addingTag', 'new');
      }
    }
  });

}).call(this);
