// Generated by CoffeeScript 1.3.3

_.extend(Template.comment, Template.vote, {
  events: {
    'click .reply': function(e) {
      if (!e.isPropagationStopped()) {
        e.stopPropagation();
        Session.toggle('addComment', this._id);
        Session.set('editComment', null);
        Meteor.flush();
        return window.focusById("reply-" + this._id);
      }
    },
    'click .edit': function(e) {
      if (!e.isPropagationStopped()) {
        e.stopPropagation();
        Session.set('addComment', null);
        Session.toggle('editComment', this._id);
        Meteor.flush();
        return window.focusById("edit-" + this._id);
      }
    },
    'click .remove': function(e) {
      if (!e.isPropagationStopped()) {
        e.stopPropagation();
        return Comments.remove(this._id);
      }
    },
    'click .unexpand': function(e) {
      if (!e.isPropagationStopped()) {
        e.stopPropagation();
        Session.embed('unexpand', this._id, true);
        return Session.toggle('redraw');
      }
    },
    'mouseover .highlight': function(e) {
      if (!e.isPropagationStopped()) {
        e.stopPropagation();
        return $(e.target).closest('.comment').addClass('hover');
      }
    },
    'mouseleave .highlight': function(e) {
      if (!e.isPropagationStopped()) {
        e.stopPropagation();
        return $(e.target).closest('.comment').removeClass('hover');
      }
    },
    'keyup .comment-text, keydown .comment-text': window.makeOkCancelHandler({
      ok: function(text, e) {
        var data;
        data = {
          text: text,
          parent: this._id,
          topic: Session.get('topic'),
          topicType: Session.get('topicType')
        };
        Meteor.call('comment', data);
        Session.set('addComment', null);
        Session.set('editComment', null);
        return e.target.value = "";
      }
    }),
    'keyup .edit-text, keydown .edit-text': window.makeOkCancelHandler({
      ok: function(text, e) {
        var data;
        data = {
          _id: this._id,
          text: text
        };
        Meteor.call('comment', data);
        Session.set('addComment', null);
        Session.set('editComment', null);
        return e.target.value = "";
      }
    })
  },
  unexpand: function() {
    var field;
    Session.get('redraw');
    field = Session.get('unexpand');
    if (field) {
      return field[this._id];
    }
    return false;
  },
  verb: function() {
    if (this.parent != null) {
      return 'replied';
    }
    return 'commented';
  },
  nested: function() {
    var parent;
    parent = Session.get('parent');
    if (parent) {
      if (this.level - 1 > Session.get('level')) {
        return 'nested';
      } else {
        return '';
      }
    } else {
      if (this.level > Session.get('level')) {
        return 'nested';
      } else {
        return '';
      }
    }
  },
  cutoff: function() {
    var parent;
    parent = Session.get('parent');
    if (parent) {
      return this.level > Session.get('level') + 4;
    } else {
      return this.level > Session.get('level') + 3;
    }
  },
  user: function() {
    return Meteor.users.findOne(this.user);
  },
  mention: function() {
    if (this.mention) {
      return Meteor.users.findOne(this.mention);
    }
  },
  replies: function() {
    var sel, sort;
    sel = Template.comments.select(this._id);
    sort = Template.filter.sort();
    return Comments.find(sel, {
      sort: sort
    });
  }
});

_.extend(Template.comment.events, Template.vote.events);
