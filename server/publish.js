// Generated by CoffeeScript 1.3.3
(function() {
  var calculateScore, countVotes, updateScore;

  Meteor.publish('slideshows', function() {
    return Slideshows.find();
  });

  Meteor.publish('activities', function() {
    return Activities.find();
  });

  Meteor.publish('drafts', function(user) {
    return Drafts.find({
      user: user
    });
  });

  Meteor.publish('ushers', function() {
    return Ushers.find();
  });

  Meteor.publish('slides', function(slideshowId) {
    return Slides.find({
      slideshowId: slideshowId
    });
  });

  Meteor.publish('comments', function(topic) {
    return Comments.find({
      topic: topic
    });
  });

  Meteor.publish('achievements', function() {
    return Achievements.find();
  });

  Meteor.publish('titles', function(entity) {
    return Titles.find({
      entity: entity
    });
  });

  Meteor.publish('votes', function() {
    return Votes.find({
      user: this.userId()
    });
  });

  Meteor.publish('favourites', function() {
    return Favourites.find({
      user: this.userId()
    });
  });

  Meteor.publish('quests', function() {
    return Quests.find({
      user: this.userId()
    });
  });

  Meteor.publish('accomplishments', function() {
    return Accomplishments.find({
      user: this.userId()
    });
  });

  countVotes = function(id, up) {
    return Votes.find({
      entity: id,
      up: up
    }).count();
  };

  calculateScore = function(id) {
    var down, up;
    up = countVotes(id, true);
    down = countVotes(id, false);
    return up - down;
  };

  updateScore = function(collection, id, score, callback) {
    return collection.update(id, {
      $set: {
        score: score
      }
    }, callback);
  };

  Meteor.methods({
    updateAchievementScore: function(id) {
      var score;
      score = calculateScore(id);
      return updateScore(Achievements, id, score);
    },
    updateTitleScore: function(titleId, achievementId) {
      var score;
      score = calculateScore(titleId);
      return updateScore(Titles, titleId, score, function() {
        var best;
        best = Titles.findOne({
          entity: achievementId
        }, {
          sort: {
            score: -1
          }
        });
        if (best) {
          return Achievements.update(achievementId, {
            $set: {
              title: best.title
            }
          });
        }
      });
    }
  });

}).call(this);
