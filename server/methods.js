// Generated by CoffeeScript 1.3.3
(function() {
  var calculateScore, countVotes, updateScore;

  countVotes = function(id, up) {
    return Votes.find({
      entity: id,
      up: up
    }).count();
  };

  calculateScore = function(id) {
    var down, up;
    up = countVotes(id, true);
    down = countVotes(id, false);
    return up - down;
  };

  updateScore = function(collection, id, score, callback) {
    return collection.update(id, {
      $set: {
        score: score
      }
    }, callback);
  };

  Meteor.methods({
    updateUserScoreComplete: function() {
      var a, accs, entities, s, score;
      accs = Accomplishments.find({
        user: this.userId()
      });
      accs = accs.fetch();
      entities = _.pluck(accs, 'entity');
      a = Achievements.find({
        _id: {
          $in: entities
        }
      });
      a = a.fetch();
      s = _.pluck(a, 'score');
      score = _.reduce(s, function(memo, num) {
        return memo + num;
      }, 0);
      return updateScore(Meteor.users, this.userId(), score);
    },
    accomplish: function(id, stry) {
      var a, acc;
      acc = Accomplishments.findOne({
        user: this.userId(),
        entity: id
      });
      if (acc) {
        return Accomplishments.update(acc._id, {
          $set: {
            story: stry,
            update: new Date()
          }
        });
      } else {
        Accomplishments.insert({
          user: this.userId(),
          entity: id,
          story: stry,
          score: 0,
          date: new Date(),
          update: new Date()
        });
        a = Achievements.findOne(id);
        if (a) {
          return Meteor.users.update(this.userId(), {
            $inc: {
              score: a.score
            }
          });
        }
      }
    },
    updateAchievementScore: function(id) {
      var score;
      score = calculateScore(id);
      return updateScore(Achievements, id, score);
    },
    updateTitleScore: function(titleId, achievementId) {
      var score;
      score = calculateScore(titleId);
      return updateScore(Titles, titleId, score, function() {
        var best;
        best = Titles.findOne({
          entity: achievementId
        }, {
          sort: {
            score: -1
          }
        });
        if (best) {
          return Achievements.update(achievementId, {
            $set: {
              title: best.title
            }
          });
        }
      });
    }
  });

}).call(this);
