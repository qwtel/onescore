// Generated by CoffeeScript 1.3.3
var Accomplishment, Achievement, Comment, Model, Notification, Title, Vote, a,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Model = (function(_super) {

  __extends(Model, _super);

  function Model() {
    return Model.__super__.constructor.apply(this, arguments);
  }

  Model.prototype.type = 'scratchpad';

  Model.prototype.idAttribute = '_id';

  Model.prototype.defaults = {
    user: '',
    date: new Date(),
    score: 0,
    hot: 0,
    best: 0
  };

  Model.prototype.fields = [];

  Model.prototype.initialize = function() {
    return this.fields = _.keys(this.defaults);
  };

  return Model;

})(Backbone.Model);

Notification = (function(_super) {

  __extends(Notification, _super);

  function Notification() {
    return Notification.__super__.constructor.apply(this, arguments);
  }

  Notification.prototype.defaults = _.extend({}, _super.prototype.defaults, {
    entity: '',
    entityType: '',
    target: '',
    targetType: '',
    receivers: []
  });

  Notification.notify = function(entity, target) {};

  return Notification;

})(Model);

Vote = (function(_super) {

  __extends(Vote, _super);

  function Vote() {
    return Vote.__super__.constructor.apply(this, arguments);
  }

  Vote.prototype.defaults = _.extend({}, _super.prototype.defaults, {
    entity: '',
    entityType: '',
    up: true
  });

  Vote.prototype.initialize = function() {
    var entity;
    Vote.__super__.initialize.call(this);
    entity = Collections[this.type].findOne({
      user: this.get('user'),
      entity: this.get('entity')
    });
    if (entity) {
      return this.set('_id', entity._id);
    }
  };

  Vote.vote = function(data) {
    var vote;
    vote = new Vote(data);
    return vote.save();
  };

  Vote.prototype.validate = function(attrs) {};

  return Vote;

})(Model);

Achievement = (function(_super) {

  __extends(Achievement, _super);

  function Achievement() {
    return Achievement.__super__.constructor.apply(this, arguments);
  }

  Achievement.prototype.type = 'achievement';

  Achievement.prototype.defaults = _.extend({}, _super.prototype.defaults, {
    value: 0,
    comments: 0
  });

  return Achievement;

})(Model);

Accomplishment = (function(_super) {

  __extends(Accomplishment, _super);

  function Accomplishment() {
    return Accomplishment.__super__.constructor.apply(this, arguments);
  }

  Accomplishment.prototype.type = 'accomplishment';

  return Accomplishment;

})(Model);

Comment = (function(_super) {

  __extends(Comment, _super);

  function Comment() {
    return Comment.__super__.constructor.apply(this, arguments);
  }

  Comment.prototype.type = 'comment';

  return Comment;

})(Model);

Title = (function(_super) {

  __extends(Title, _super);

  function Title() {
    return Title.__super__.constructor.apply(this, arguments);
  }

  Title.prototype.type = 'title';

  return Title;

})(Model);

a = new Achievement;
